#!/bin/bash

function echoterd (){
    [[ $# == 0 ]] && return 1

    declare -i TERM_COLS="$(tput cols)"
    declare -i str_len="${#1}"
    [[ $str_len -ge $TERM_COLS ]] && {
        echo -e "$1";
        return 0;
    }

    declare -i filler_len="$(( (TERM_COLS - str_len) / 2 ))"
    [[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
    filler=""
    for (( i = 0; i < filler_len; i++ )); do
        filler="${filler}${ch}"
    done

    printf "%s%s%s" "$filler" "$1" "$filler"
    [[ $(( (TERM_COLS - str_len) % 2 )) -ne 0 ]] && printf "%s" "${ch}"

    return 0
}

function CenteredGrid(){
	while read -r linerd; do
		echo "$linerd" | sed  -e :a -e "s/^.\{1,$(tput cols)\}$/ & /;ta" | tr -d '\n' | head -c "$(tput cols)"
	done </dev/stdin
}

function UnitConversion(){
	local B=$1
	local KB=$(bc -l <<< "scale=2; $B/1024")
	local MB=$(bc -l <<< "scale=2; $B/1024/1024")
	local GB=$(bc -l <<< "scale=2; $B/1024/1024/1024")
	local TB=$(bc -l <<< "scale=2; $GB/1024")
	[[ $(echo "$TB" | awk -F [.] '{print $1}') > 0 ]] && echo "$TB TB" && return
	[[ $(echo "$GB" | awk -F [.] '{print $1}') > 0 ]] && echo "$GB GB" && return
	[[ $(echo "$MB" | awk -F[.] '{print $1}') > 0 ]] && echo "$MB MB" && return
	[[ $(echo "$KB" | awk -F[.] '{print $1}') > 0 ]] && echo "$KB KB" && return
	[[ $(echo "$B" | awk -F[.] '{print $1}') > 0 ]] && echo "$B B"
}

function TimeTranslate {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  [[ $D > 0 ]] && printf '%d D ' $D
  [[ $H > 0 ]] && printf '%d Hrs ' $H
  [[ $M > 0 ]] && printf '%d Mins ' $M
  [[ $D > 0 || $H > 0 || $M > 0 ]] && printf 'and '
  printf '%d Secs\n' $S
}

Banner(){
cat <<"EOF"
 _____ _                             ____ _ _                             
| ____(_)_   _____  _ __ ___        / ___| (_)                            
|  _| | \ \ / / _ \| '_ ` _ \ _____| |   | | |                            
| |___| |\ V / (_) | | | | | |_____| |___| | |                            
|_____|_| \_/ \___/|_| |_| |_|      \____|_|_|

EOF
}

MainMenuMessage(){
	clear
	tput setaf "$(( RANDOM % 256 ))" && echo "$(Banner | CenteredGrid)" && tput sgr0
	echo
	echo "Version: v0.1 beta" | CenteredGrid
	echo
}

RedCol() {
    printf '\033[1;31;31m%b\033[0m' "$1"
}

AdditionalInfoFunc(){
	tput setaf 2222; printf "[ADDITIONAL INFO] "; tput sgr0; printf "$1"; printf "\n"
}

InputSign(){
	tput setaf 111; printf "[+] "; tput sgr0; printf "$1"; printf "\n"
}

NumberingFunc(){
	tput setaf 987; printf "[$1] "; tput sgr0; printf "$2"; printf "\n"
}

GreenCol() {
    printf '\033[1;31;32m%b\033[0m' "$1"
}

YellowCol() {
    printf '\033[1;31;33m%b\033[0m' "$1"
}

InfoFunc() {
    GreenCol "[INFO] "
    printf -- "%s" "$1"
    printf "\n"
}

InfoFuncDown() {
    GreenCol "[INFO] "
    printf -- "%s" "$1"
}

WarningFunc() {
    YellowCol "[WARN] "
    printf -- "%s" "$1"
    printf "\n"
}

ErrorFunc() {
    RedCol "[ERROR] "
    printf -- "%s" "$1" >/dev/stderr
    printf "\n"
}

function printTable(){
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"
    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"
        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1
            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"
                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"
                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
                # Add Header Or Body
                table="${table}\n"
                local j=1
                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done
                table="${table}#|\n"
                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done
            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | while read -r lookspace; do if [[ $lookspace =~ ^\+ ]]; then echo "$lookspace" | sed 's| |-|g'; else echo "$lookspace"; fi; done
            fi
        fi
    fi
}

function removeEmptyLines(){
    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString(){
    local -r string="${1}"
    local -r numberToRepeat="${2}"
    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString(){
    local -r string="${1}"
    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}

function trimString(){
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

function ProgressBarModifiedUnin(){
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
printf "\r$(tput setaf 111; printf "[+] "; tput sgr0)Uninstalling : [${_fill// /â–‡}${_empty// / }] ${_progress}%%"
}


